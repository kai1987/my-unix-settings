########################################
# Snippets for the MoonScript language #
########################################

snippet shebang "Shebang header" b
	#!/usr/bin/env moon
	$0

snippet forp "pair for loop" b
	for${2:name},${2:val} in pairs(${3:table_name}) do
		$0
	end

snippet fori "ipair for foop" b
	for${2:idx},${2:val} in ipairs(${3:table_name}) do
		$0
	end

snippet for "numeric for loop" b
	for${2:i}=${2:first},${3:last}${4/^..*/(?0:,:)/}${4:step} do
		$0
	end

snippet log
	printf "[`Filename()`::${1:method}] ${2:message}"

snippet --- "function comment block"
	--- ${1:function_name}
	-- ${2:desc}

snippet @param "comment param"
	@param ${1:param} ${2:desc}

snippet @return "comment return"
	@return ${1:desc}

snippet @see "comment see"
	@see ${1:desc}

snippet callback? "init callback if exists"
	callback ${1:nil} if type(callback) == "function"

######### Quick-x Snippets : BEGIN ########################
snippet audio.getMusicVolume() "quick-x(v2): 返回音乐的音量值"
	audio.getMusicVolume()

snippet audio.setMusicVolume(volume) "quick-x(v2): 设置音乐的音量"
	audio.setMusicVolume(${1:volume})

snippet audio.getSoundsVolume() "quick-x(v2): 返回音效的音量值"
	audio.getSoundsVolume()

snippet audio.setSoundsVolume(volume) "quick-x(v2): 设置音效的音量"
	audio.setSoundsVolume(${1:volume})

snippet audio.preloadMusic(filename) "quick-x(v2): 预载入一个音乐文件"
	audio.preloadMusic(${1:filename})

snippet audio.playMusic(filename\,isLoop) "quick-x(v2): 播放音乐"
	audio.playMusic(${1:filename}, ${2:isLoop})

snippet audio.stopMusic(isReleaseData) "quick-x(v2): 停止播放音乐"
	audio.stopMusic(${1:isReleaseData})

snippet audio.pauseMusic() "quick-x(v2): 暂停音乐的播放"
	audio.pauseMusic()

snippet audio.resumeMusic() "quick-x(v2): 恢复暂停的音乐"
	audio.resumeMusic()

snippet audio.rewindMusic() "quick-x(v2): 从头开始重新播放当前音乐"
	audio.rewindMusic()

snippet audio.willPlayMusic() "quick-x(v2): 检查是否可以开始播放音乐"
	audio.willPlayMusic()

snippet audio.isMusicPlaying() "quick-x(v2): 检查当前是否正在播放音乐"
	audio.isMusicPlaying()

snippet audio.playSound(filename\,isLoop) "quick-x(v2): 播放音效，并返回音效句柄"
	audio.playSound(${1:filename}, ${2:isLoop})

snippet audio.pauseSound(handle) "quick-x(v2): 暂停指定的音效"
	audio.pauseSound(${1:handle})

snippet audio.pauseAllSounds() "quick-x(v2): 暂停所有音效"
	audio.pauseAllSounds()

snippet audio.resumeSound(handle) "quick-x(v2): 恢复暂停的音效"
	audio.resumeSound(${1:handle})

snippet audio.resumeAllSounds() "quick-x(v2): 恢复所有的音效"
	audio.resumeAllSounds()

snippet audio.stopSound(handle) "quick-x(v2): 停止指定的音效"
	audio.stopSound(${1:handle})

snippet audio.stopAllSounds() "quick-x(v2): 停止所有音效"
	audio.stopAllSounds()

snippet audio.preloadSound(filename) "quick-x(v2): 预载入一个音效文件"
	audio.preloadSound(${1:filename})

snippet audio.unloadSound(filename) "quick-x(v2): 从内存卸载一个音效"
	audio.unloadSound(${1:filename})

snippet crypto.encryptAES256(plaintext\,key) "quick-x(v2): 使用 AES256 算法加密内容"
	crypto.encryptAES256(${1:plaintext}, ${2:key})

snippet crypto.decryptAES256(ciphertext\,key) "quick-x(v2): 使用 AES256 算法解密内容"
	crypto.decryptAES256(${1:ciphertext}, ${2:key})

snippet crypto.encryptXXTEA(plaintext\,key) "quick-x(v2): 使用 XXTEA 算法加密内容"
	crypto.encryptXXTEA(${1:plaintext}, ${2:key})

snippet crypto.decryptXXTEA(ciphertext\,key) "quick-x(v2): 使用 XXTEA 算法解密内容"
	crypto.decryptXXTEA(${1:ciphertext}, ${2:key})

snippet crypto.encodeBase64(plaintext) "quick-x(v2): 使用 BASE64 算法编码内容"
	crypto.encodeBase64(${1:plaintext})

snippet crypto.decodeBase64(ciphertext) "quick-x(v2): 使用 BASE64 算法解码内容"
	crypto.decodeBase64(${1:ciphertext})

snippet crypto.md5(input\,isRawOutput) "quick-x(v2): 计算内容的 MD5 码"
	crypto.md5(${1:input}, ${2:isRawOutput})

snippet crypto.md5file(path) "quick-x(v2): 计算文件的 MD5 码"
	crypto.md5file(${1:path})

snippet DEPRECATED(f\,name\,newname) "quick-x(v2): 定义一个作废的接口"
	DEPRECATED(${1:f}, ${2:name}, ${3:newname})

snippet PRINT_DEPRECATED(msg) "quick-x(v2): 显示作废信息"
	PRINT_DEPRECATED(${1:msg})

snippet printLog(tag\,fmt\,...) "quick-x(v2): 打印调试信息"
	printLog(${1:tag}, ${2:fmt}, ${3:...})

snippet printError(fmt\,...) "quick-x(v2): 输出 tag 为 ERR 的调试信息"
	printError(${1:fmt}, ${2:...})

snippet printInfo(fmt\,...) "quick-x(v2): 输出 tag 为 INFO 的调试信息"
	printInfo(${1:fmt}, ${2:...})

snippet dump(value\,desciption\,nesting) "quick-x(v2): 输出值的内容"
	dump(${1:value}, ${2:desciption}, ${3:nesting})

snippet device.showActivityIndicator() "quick-x(v2): 显示活动指示器"
	device.showActivityIndicator()

snippet device.hideActivityIndicator() "quick-x(v2): 隐藏正在显示的活动指示器"
	device.hideActivityIndicator()

snippet device.showAlert(title\,message\,buttonLabels\,listener) "quick-x(v2): 显示一个包含按钮的弹出对话框"
	device.showAlert(${1:title}, ${2:message}, ${3:buttonLabels}, ${4:listener})

snippet device.cancelAlert() "quick-x(v2): 取消正在显示的对话框。"
	device.cancelAlert()

snippet device.getOpenUDID() "quick-x(v2): 返回设备的 OpenUDID 值"
	device.getOpenUDID()

snippet device.openURL(url) "quick-x(v2): 用浏览器打开指定的网址"
	device.openURL(${1:url})

snippet device.showInputBox(title\,message\,defaultValue) "quick-x(v2): 显示一个输入框，并返回用户输入的内容。"
	device.showInputBox(${1:title}, ${2:message}, ${3:defaultValue})

snippet display.newScene(name) "quick-x(v2): 创建一个新场景，并返回 CCScene 场景对象。"
	display.newScene(${1:name})

snippet display.wrapSceneWithTransition(scene\,transitionType\,time\,more) "quick-x(v2): 用场景切换过渡效果包装场景对象，并返回场景过渡对象。"
	display.wrapSceneWithTransition(${1:scene}, ${2:transitionType}, ${3:time}, ${4:more})

snippet display.replaceScene(newScene\,transitionType\,time\,more) "quick-x(v2): 切换到新场景"
	display.replaceScene(${1:newScene}, ${2:transitionType}, ${3:time}, ${4:more})

snippet display.getRunningScene() "quick-x(v2): 返回当前正在运行的场景对象"
	display.getRunningScene()

snippet display.pause() "quick-x(v2): 暂停当前场景"
	display.pause()

snippet display.resume() "quick-x(v2): 恢复当前暂停的场景"
	display.resume()

snippet display.newLayer() "quick-x(v2): 创建并返回一个 CCLayer 层对象"
	display.newLayer()

snippet display.newColorLayer(color) "quick-x(v2): 创建一个颜色填充层"
	display.newColorLayer(${1:color})

snippet display.newNode() "quick-x(v2): 创建并返回一个 CCNode 对象"
	display.newNode()

snippet display.newClippingRegionNode(rect) "quick-x(v2): 创建并返回一个 CCClippingRegionNode 对象。"
	display.newClippingRegionNode(${1:rect})

snippet display.newSprite(filename\,x\,y\,params) "quick-x(v2): 创建并返回一个 CCSprite 显示对象。"
	display.newSprite(${1:filename}, ${2:x}, ${3:y}, ${4:params})

snippet display.newScale9Sprite(filename\,x\,y\,size) "quick-x(v2): 创建并返回一个 CCSprite9Scale 显示对象。"
	display.newScale9Sprite(${1:filename}, ${2:x}, ${3:y}, ${4:size})

snippet display.newTilesSprite(filename\,rect) "quick-x(v2): "
	display.newTilesSprite(${1:filename}, ${2:rect})

snippet display.newTiledBatchNode(filename\,plistFile\,size\,hPadding\,vPadding) "quick-x(v2): create a tiled CCSpriteBatchNode, the image can not a POT file."
	display.newTiledBatchNode(${1:filename}, ${2:plistFile}, ${3:size}, ${4:hPadding}, ${5:vPadding})

snippet display.newMaskedSprite(__mask\,__pic) "quick-x(v2): Create a masked sprite"
	display.newMaskedSprite(${1:__mask}, ${2:__pic})

snippet display.newFilteredSprite(filename\,filters\,params) "quick-x(v2): Create a Filtered Sprite"
	display.newFilteredSprite(${1:filename}, ${2:filters}, ${3:params})

snippet display.newGraySprite(filename\,params) "quick-x(v2): Create a Gray Sprite by CCFilteredSprite"
	display.newGraySprite(${1:filename}, ${2:params})

snippet display.newSolidCircle(radius\,params) "quick-x(v2): Create a circle or a sector or a pie by CCDrawNode"
	display.newSolidCircle(${1:radius}, ${2:params})

snippet display.newCircle(radius\,params) "quick-x(v2): 创建并返回一个 CCCircleShape （圆）对象。"
	display.newCircle(${1:radius}, ${2:params})

snippet display.newRect(width\,height\,params) "quick-x(v2): 创建并返回一个 CCRectShape （矩形）对象。"
	display.newRect(${1:width}, ${2:height}, ${3:params})

snippet display.newPolygon(points\,scale) "quick-x(v2): 创建并返回一个 CCPolygonShape （多边形）对象。"
	display.newPolygon(${1:points}, ${2:scale})

snippet display.align(target\,anchorPoint\,x\,y) "quick-x(v2): 将指定的显示对象按照特定锚点对齐。"
	display.align(${1:target}, ${2:anchorPoint}, ${3:x}, ${4:y})

snippet display.addSpriteFramesWithFile(plistFilename\,image\,handler) "quick-x(v2): 将指定的 Sprite Sheets 材质文件及其数据文件载入图像帧缓存。"
	display.addSpriteFramesWithFile(${1:plistFilename}, ${2:image}, ${3:handler})

snippet display.removeSpriteFramesWithFile(plistFilename\,imageName) "quick-x(v2): 从内存中卸载 Sprite Sheets 材质和数据文件"
	display.removeSpriteFramesWithFile(${1:plistFilename}, ${2:imageName})

snippet display.setTexturePixelFormat(filename\,format) "quick-x(v2): 设置材质格式。"
	display.setTexturePixelFormat(${1:filename}, ${2:format})

snippet display.removeSpriteFrameByImageName(imageName) "quick-x(v2): 从图像帧缓存中删除一个图像。"
	display.removeSpriteFrameByImageName(${1:imageName})

snippet display.newBatchNode(image\,capacity) "quick-x(v2): 从指定的图像文件创建并返回一个批量渲染对象。"
	display.newBatchNode(${1:image}, ${2:capacity})

snippet display.newSpriteFrame(frameName) "quick-x(v2): 创建并返回一个图像帧对象。"
	display.newSpriteFrame(${1:frameName})

snippet display.newFrames(pattern\,begin\,length\,isReversed) "quick-x(v2): 以特定模式创建一个包含多个图像帧对象的数组。"
	display.newFrames(${1:pattern}, ${2:begin}, ${3:length}, ${4:isReversed})

snippet display.newAnimation(frames\,time) "quick-x(v2): 以包含图像帧的数组创建一个动画对象。"
	display.newAnimation(${1:frames}, ${2:time})

snippet display.getAnimationCache(name) "quick-x(v2): 取得以指定名字缓存的动画对象，如果不存在则返回 nil。"
	display.getAnimationCache(${1:name})

snippet display.removeAnimationCache(name) "quick-x(v2): 删除指定名字缓存的动画对象。"
	display.removeAnimationCache(${1:name})

snippet filter.newFilter(__filterName\,__param) "quick-x(v2): 创建一个滤镜效果，并返回 CCFilter 场景对象。"
	filter.newFilter(${1:__filterName}, ${2:__param})

snippet filter.newFilters(__filterNames\,__params) "quick-x(v2): 创建滤镜数组，并返回 CCFilter 的数组对象"
	filter.newFilters(${1:__filterNames}, ${2:__params})

snippet printf(fmt\,...) "quick-x(v2): 输出格式化字符串"
	printf(${1:fmt}, ${2:...})

snippet checknumber(value\,base) "quick-x(v2): 检查并尝试转换为数值，如果无法转换则返回 0"
	checknumber(${1:value}, ${2:base})

snippet checkint(value) "quick-x(v2): 检查并尝试转换为整数，如果无法转换则返回 0"
	checkint(${1:value})

snippet checkbool(value) "quick-x(v2): 检查并尝试转换为布尔值，除了 nil 和 false，其他任何值都会返回 true"
	checkbool(${1:value})

snippet checktable(value) "quick-x(v2): 检查值是否是一个表格，如果不是则返回一个空表格"
	checktable(${1:value})

snippet isset(hashtable\,key) "quick-x(v2): 如果表格中指定 key 的值为 nil，或者输入值不是表格，返回 false，否则返回 true"
	isset(${1:hashtable}, ${2:key})

snippet clone(object) "quick-x(v2): 深度克隆一个值"
	clone(${1:object})

snippet class(classname\,super) "quick-x(v2): 创建一个类"
	class(${1:classname}, ${2:super})

snippet iskindof(obj\,classname) "quick-x(v2): 如果对象是指定类或其子类的实例，返回 true，否则返回 false"
	iskindof(${1:obj}, ${2:classname})

snippet import(moduleName\,currentModuleName) "quick-x(v2): 载入一个模块"
	import(${1:moduleName}, ${2:currentModuleName})

snippet handler(obj\,method) "quick-x(v2): 将 Lua 对象及其方法包装为一个匿名函数"
	handler(${1:obj}, ${2:method})

snippet math.newrandomseed() "quick-x(v2): 根据系统时间初始化随机数种子，让后续的 math.random() 返回更随机的值"
	math.newrandomseed()

snippet math.round(value) "quick-x(v2): 对数值进行四舍五入，如果不是数值则返回 0"
	math.round(${1:value})

snippet io.exists(path) "quick-x(v2): 检查指定的文件或目录是否存在，如果存在返回 true，否则返回 false"
	io.exists(${1:path})

snippet io.readfile(path) "quick-x(v2): 读取文件内容，返回包含文件内容的字符串，如果失败返回 nil"
	io.readfile(${1:path})

snippet io.writefile(path\,content\,mode) "quick-x(v2): 以字符串内容写入文件，成功返回 true，失败返回 false"
	io.writefile(${1:path}, ${2:content}, ${3:mode})

snippet io.pathinfo(path) "quick-x(v2): 拆分一个路径字符串，返回组成路径的各个部分"
	io.pathinfo(${1:path})

snippet io.filesize(path) "quick-x(v2): 返回指定文件的大小，如果失败返回 false"
	io.filesize(${1:path})

snippet table.nums(t) "quick-x(v2): 计算表格包含的字段数量"
	table.nums(${1:t})

snippet table.keys(hashtable) "quick-x(v2): 返回指定表格中的所有键"
	table.keys(${1:hashtable})

snippet table.values(hashtable) "quick-x(v2): 返回指定表格中的所有值"
	table.values(${1:hashtable})

snippet table.merge(dest\,src) "quick-x(v2): 将来源表格中所有键及其值复制到目标表格对象中，如果存在同名键，则覆盖其值"
	table.merge(${1:dest}, ${2:src})

snippet table.insertto(dest\,src\,begin) "quick-x(v2): 在目标表格的指定位置插入来源表格，如果没有指定位置则连接两个表格"
	table.insertto(${1:dest}, ${2:src}, ${3:begin})

snippet table.keyof(hashtable\,value) "quick-x(v2): 从表格中查找指定值，返回其 key，如果没找到返回 nil"
	table.keyof(${1:hashtable}, ${2:value})

snippet table.removebyvalue(array\,value\,removeall) "quick-x(v2): 从表格中删除指定值，返回删除的值的个数"
	table.removebyvalue(${1:array}, ${2:value}, ${3:removeall})

snippet table.map(t\,fn) "quick-x(v2): 对表格中每一个值执行一次指定的函数，并用函数返回值更新表格内容"
	table.map(${1:t}, ${2:fn})

snippet table.walk(t\,fn) "quick-x(v2): 对表格中每一个值执行一次指定的函数，但不改变表格内容"
	table.walk(${1:t}, ${2:fn})

snippet table.filter(t\,fn) "quick-x(v2): 对表格中每一个值执行一次指定的函数，如果该函数返回 false，则对应的值会从表格中删除"
	table.filter(${1:t}, ${2:fn})

snippet table.unique(t) "quick-x(v2): 遍历表格，确保其中的值唯一"
	table.unique(${1:t})

snippet string.htmlspecialchars(input) "quick-x(v2): 将特殊字符转为 HTML 转义符"
	string.htmlspecialchars(${1:input})

snippet string.restorehtmlspecialchars(input) "quick-x(v2): 将 HTML 转义符还原为特殊字符，功能与 string.htmlspecialchars() 正好相反"
	string.restorehtmlspecialchars(${1:input})

snippet string.nl2br(input) "quick-x(v2): 将字符串中的 \n 换行符转换为 HTML 标记"
	string.nl2br(${1:input})

snippet string.text2html(input) "quick-x(v2): 将字符串中的特殊字符和 \n 换行符转换为 HTML 转移符和标记"
	string.text2html(${1:input})

snippet string.split(input\,delimiter) "quick-x(v2): 用指定字符或字符串分割输入字符串，返回包含分割结果的数组"
	string.split(${1:input}, ${2:delimiter})

snippet string.ltrim(input) "quick-x(v2): 去除输入字符串头部的空白字符，返回结果"
	string.ltrim(${1:input})

snippet string.rtrim(input) "quick-x(v2): 去除输入字符串尾部的空白字符，返回结果"
	string.rtrim(${1:input})

snippet string.trim(input) "quick-x(v2): 去掉字符串首尾的空白字符，返回结果"
	string.trim(${1:input})

snippet string.ucfirst(input) "quick-x(v2): 将字符串的第一个字符转为大写，返回结果"
	string.ucfirst(${1:input})

snippet string.urlencode(input) "quick-x(v2): 将字符串转换为符合 URL 传递要求的格式，并返回转换结果"
	string.urlencode(${1:input})

snippet string.urldecode(input) "quick-x(v2): 将 URL 中的特殊字符还原，并返回结果"
	string.urldecode(${1:input})

snippet string.utf8len(input) "quick-x(v2): 计算 UTF8 字符串的长度，每一个中文算一个字符"
	string.utf8len(${1:input})

snippet string.formatnumberthousands(num) "quick-x(v2): 将数值格式化为包含千分位分隔符的字符串"
	string.formatnumberthousands(${1:num})

snippet json.encode(var) "quick-x(v2): 将表格数据编码为 JSON 字符串"
	json.encode(${1:var})

snippet json.decode(text) "quick-x(v2): 将 JSON 字符串解码为表格对象"
	json.decode(${1:text})

snippet checkArguments(args\,sig) "quick-x(v2): 私有方法"
	checkArguments(${1:args}, ${2:sig})

snippet luaj.callStaticMethod(className\,methodName\,args\,sig) "quick-x(v2): 调用java类的接口。"
	luaj.callStaticMethod(${1:className}, ${2:methodName}, ${3:args}, ${4:sig})

snippet luaoc.callStaticMethod(className\,methodName\,args) "quick-x(v2): 调用Object-C类的接口。"
	luaoc.callStaticMethod(${1:className}, ${2:methodName}, ${3:args})

snippet network.isLocalWiFiAvailable() "quick-x(v2): 检查地 WIFI 网络是否可用"
	network.isLocalWiFiAvailable()

snippet network.isInternetConnectionAvailable() "quick-x(v2): 检查互联网连接是否可用"
	network.isInternetConnectionAvailable()

snippet network.isHostNameReachable(hostname) "quick-x(v2): 检查是否可以解析指定的主机名"
	network.isHostNameReachable(${1:hostname})

snippet network.getInternetConnectionStatus() "quick-x(v2): 返回互联网连接状态值"
	network.getInternetConnectionStatus()

snippet network.createHTTPRequest(callback\,url\,method) "quick-x(v2): 创建异步 HTTP 请求，并返回 CCHTTPRequest 对象。"
	network.createHTTPRequest(${1:callback}, ${2:url}, ${3:method})

snippet scheduler.scheduleUpdateGlobal(listener) "quick-x(v2): 计划一个全局帧事件回调，并返回该计划的句柄。"
	scheduler.scheduleUpdateGlobal(${1:listener})

snippet scheduler.scheduleGlobal(listener\,interval) "quick-x(v2): 计划一个以指定时间间隔执行的全局事件回调，并返回该计划的句柄。"
	scheduler.scheduleGlobal(${1:listener}, ${2:interval})

snippet scheduler.unscheduleGlobal(handle) "quick-x(v2): 取消一个全局计划"
	scheduler.unscheduleGlobal(${1:handle})

snippet scheduler.performWithDelayGlobal(listener\,time) "quick-x(v2): 计划一个全局延时回调，并返回该计划的句柄。"
	scheduler.performWithDelayGlobal(${1:listener}, ${2:time})

snippet Node:add(child\,zorder\,tag) "quick-x(v2): "
	Node:add(${1:child}, ${2:zorder}, ${3:tag})

snippet transition.newEasing(action\,easingName\,more) "quick-x(v2): 为图像创造效果"
	transition.newEasing(${1:action}, ${2:easingName}, ${3:more})

snippet transition.execute(target\,action\,args) "quick-x(v2): 执行一个动作效果"
	transition.execute(${1:target}, ${2:action}, ${3:args})

snippet transition.rotateTo(target\,args) "quick-x(v2): 将显示对象旋转到指定角度，并返回 CCAction 动作对象。"
	transition.rotateTo(${1:target}, ${2:args})

snippet transition.moveTo(target\,args) "quick-x(v2): 将显示对象移动到指定位置，并返回 CCAction 动作对象。"
	transition.moveTo(${1:target}, ${2:args})

snippet transition.fadeTo(target\,args) "quick-x(v2): 将显示对象的透明度改变为指定值，并返回 CCAction 动作对象。"
	transition.fadeTo(${1:target}, ${2:args})

snippet transition.scaleTo(target\,args) "quick-x(v2): 将显示对象缩放到指定比例，并返回 CCAction 动作对象。"
	transition.scaleTo(${1:target}, ${2:args})

snippet transition.sequence(actions) "quick-x(v2): 创建一个动作序列对象。"
	transition.sequence(${1:actions})

snippet transition.playAnimationOnce(target\,animation\,removeWhenFinished\,onComplete\,delay) "quick-x(v2): 在显示对象上播放一次动画，并返回 CCAction 动作对象。"
	transition.playAnimationOnce(${1:target}, ${2:animation}, ${3:removeWhenFinished}, ${4:onComplete}, ${5:delay})

snippet ui.newEditBox(params) "quick-x(v2): 创建一个文字输入框，并返回 CCEditBox 对象。"
	ui.newEditBox(${1:params})

snippet ui.newMenu(items) "quick-x(v2): 创建菜单，并返回 CCMenu 对象。"
	ui.newMenu(${1:items})

snippet ui.newImageMenuItem(params) "quick-x(v2): 创建一个图像菜单项，并返回 CCMenuItemSprite 对象。"
	ui.newImageMenuItem(${1:params})

snippet ui.newTTFLabelMenuItem(params) "quick-x(v2): 创建一个文字标签菜单项，并返回 CCMenuItemLabel 对象。"
	ui.newTTFLabelMenuItem(${1:params})

snippet ui.newBMFontLabel(params) "quick-x(v2): 用位图字体创建文本显示对象，并返回 CCLabelBMFont 对象。"
	ui.newBMFontLabel(${1:params})

snippet ui.newTTFLabel(params) "quick-x(v2): 使用 TTF 字体创建文字显示对象，并返回 CCLabelTTF 对象。"
	ui.newTTFLabel(${1:params})

snippet ui.newTTFLabelWithShadow(params) "quick-x(v2): 创建带阴影的 TTF 文字显示对象，并返回 CCLabelTTF 对象。"
	ui.newTTFLabelWithShadow(${1:params})

snippet ui.newTTFLabelWithOutline(params) "quick-x(v2): 创建带描边效果的 TTF 文字显示对象，并返回 CCLabelTTF 对象。"
	ui.newTTFLabelWithOutline(${1:params})

snippet Context:ctor() "quick-x(v2): "
	Context:ctor()

snippet Context:get(key\,defaultValue) "quick-x(v2): Get value from context. if key not exists, return default value."
	Context:get(${1:key}, ${2:defaultValue})

snippet Context:set(key\,value) "quick-x(v2): "
	Context:set(${1:key}, ${2:value})

snippet GameNetwork.init(providerName\,params) "quick-x(v2): Initializes an app with the parameters (e.g., product key, secret, display name, etc.)"
	GameNetwork.init(${1:providerName}, ${2:params})

snippet GameNetwork.request(command\,...) "quick-x(v2): Send or request information to/from the game network provider:"
	GameNetwork.request(${1:command}, ${2:...})

snippet GameNetwork.show(command\,...) "quick-x(v2): Shows (displays) information from game network provider on the screen."
	GameNetwork.show(${1:command}, ${2:...})

snippet Timer.new() "quick-x(v2): 创建一个计时器。"
	Timer.new()

snippet timer:addCountdown(eventName\,countdown\,interval) "quick-x(v2): 添加一个计时器。"
	timer:addCountdown(${1:eventName}, ${2:countdown}, ${3:interval})

snippet timer:removeCountdown(eventName) "quick-x(v2): 删除指定事件名称对应的计时器，并取消这个计时器的所有事件处理函数。"
	timer:removeCountdown(${1:eventName})

snippet timer:start() "quick-x(v2): 启动计时器容器。"
	timer:start()

snippet timer:stop() "quick-x(v2): 停止计时器容器。"
	timer:stop()

snippet StateMachine:ctor() "quick-x(v2): port from Javascript State Machine Library"
	StateMachine:ctor()

snippet ccmt.__call(self\,target) "quick-x(v2): 初始化 cc 扩展"
	ccmt.__call(${1:self}, ${2:target})

snippet DrawNode:drawPol(points\,params) "quick-x(v2): "
	DrawNode:drawPol(${1:points}, ${2:params})

snippet c.point2t(point) "quick-x(v2): 将 CCPoint 对象转换为一个 Lua 表格"
	c.point2t(${1:point})

snippet c.size2t(size) "quick-x(v2): 将 CCSzie 对象转换为一个 Lua 表格"
	c.size2t(${1:size})

snippet c.rect2t(rect) "quick-x(v2): 将 CCRect 对象转换为一个 Lua 表格"
	c.rect2t(${1:rect})

snippet c.t2point(t) "quick-x(v2): 将一个 Lua 表格转换为 CCPoint 对象"
	c.t2point(${1:t})

snippet c.t2size(t) "quick-x(v2): 将一个 Lua 表格转换为 CCSize 对象"
	c.t2size(${1:t})

snippet c.t2rect(t) "quick-x(v2): 将一个 Lua 表格转换为 CCRect 对象"
	c.t2rect(${1:t})

snippet Node:align(anchorPoint\,x\,y) "quick-x(v2): 针对 cc.Node 的扩展"
	Node:align(${1:anchorPoint}, ${2:x}, ${3:y})


######### Quick-x Snippets : END ########################



